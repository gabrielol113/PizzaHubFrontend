// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id                String      @id @default(cuid())
  email             String    @unique
  emailVerified     Boolean?
  name              String?
  password          String?
  image             String?
  accounts          Account[]
  sessions          Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?  
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user  User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken      String   @unique
  userId            String
  expires           DateTime
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier        String
  token             String
  expires           DateTime
 
  @@id([identifier, token])
}

model Order {
  id                String @id @default(cuid())
  table             Int
  status            Boolean @default(false)
  draft             Boolean @default(true)
  name              Boolean?
  created_at        DateTime? @default(now())
  updated_at        DateTime? @default(now())

  items             Item[]
}
model Category {
  id                String @id @default(cuid())
  name              String 
  products          Product[]
}

model Product {  
  id                String @id @default(cuid())
  name              String 
  price             String
  description       String
  image             String?

  category  Category @relation(fields: [category_id], references: [id], onDelete: Cascade)

  category_id       String
  items             Item[]
}

model Item {
  id                String @id @default(cuid())
  amout             String

  order Order @relation(fields: [order_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  order_id          String
  product_id        String
}